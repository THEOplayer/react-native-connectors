/**
 * Qoe data details information related to the experience event.
 *
 * https://github.com/adobe/xdm/blob/master/docs/reference/datatypes/qoedatadetails.schema.md
 */
export interface AdobeQoeDataDetails {
  // The average bitrate (in kbps). The value is predefined buckets at 100kbps intervals. The Average Bitrate is
  // computed as a weighted average of all bitrate values related to the play duration that occurred during a playback
  // session.
  bitrateAverage?: string;

  // The bitrate value (in kbps).
  bitrate?: number;

  // The average bitrate (in kbps, integer). This metric is computed as a weighted average of all bitrate
  // values related to the play duration that occurred during a playback session.
  bitrateAverageBucket?: number;

  // The number of streams in which bitrate changes occurred. This metric is set to true only if at least one bitrate
  // change event occurred during a playback session.
  hasBitrateChangeImpactedStreams?: boolean;

  // The number of bitrate changes. This value is computed as a sum of all bitrate change events that occurred
  // during a playback session.
  bitrateChangeCount?: number;

  // The number of streams in which frames were dropped. This metric is set to true only if at least one frame was
  // dropped during a playback session.
  hasDroppedFrameImpactedStreams?: boolean;

  // The number of frames dropped during playback of the main content.
  droppedFrames?: number;

  // The number of times a user quit the video before its start. This metric is set to true only if no content was
  // rendered, regardless of ads.
  isDroppedBeforeStart?: boolean;

  // The current value of the stream frame-rate (in frames per second). The field is mapped to the fps field on the
  // close call and can be accessed through processing rules.
  framesPerSecond?: number;

  // Describes the duration (in seconds) passed between video load and start.
  timeToStart?: number;

  // The number of streams impacted by buffering. This metric is set to true only if at least one buffer event
  // occurred during a playback session.
  hasBufferImpactedStreams?: boolean;

  // The number of buffer events. This metric is computed as a count of the different buffer states that occurred
  // during a playback session. This is a count of how many times the player enters a buffer state from other states,
  // e.g., playing or pausing.
  bufferCount?: number;

  // The total amount of time, in seconds, spent buffering. This value is computed as a sum of all buffer events
  // durations that occurred during a playback session.
  bufferTime?: number;

  // The number of streams in which an error event occurred (i.e., trackError was called during the playback session,
  // and a type=error heartbeat call was generated). This metric is set to true only if at least one error occurred
  // during playback.
  hasErrorImpactedStreams?: boolean;

  // The number of errors that occurred (Integer). This value is computed as a sum of all error events that occurred
  // during a playback session.
  errorCount?: number;

  // The number of streams in which a stalled event occurred. This metric is set to true only if at least one stall
  // occurred during playback.
  hasStallImpactedStreams?: boolean;

  // The number of times the playback was stalled during a playback session.
  stallCount?: number;

  // The total time (seconds; integer) the playback was stalled during a playback session.
  stallTime?: number;

  // The unique error IDs generated by the player SDK. Customers must provide the error codes/ids at implementation
  // time via provided error APIs.
  playerSdkErrors?: string[];

  // The unique error IDs from any external source, e.g., CDN errors. Customers must provide the error codes/ids at
  // implementation time via provided error APIs.
  externalErrors?: string[];

  // The unique error IDs generated by Media SDK during playback.
  mediaSdkErrors?: string[];
}
